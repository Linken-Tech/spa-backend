# Reference for target specific branch and trigger

# on:
#   # Set your workflow to run on push events to the develop and all feature branches
#   push:
#     branches:
#       - develop
#       - feature/*
#   # Set your workflow to run on pull request events that target the main branch
#   pull_request:
#     branches:
#       - main

# DEPLOYMENT ON AWS

name: AWS Deployment

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: ap-southeast-1 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: spa-develop-server-ecr # set this to your Amazon ECR repository name
  ECS_SERVICE: server-service-develop # set this to your Amazon ECS service name
  ECS_CLUSTER: spa-cluster-develop # set this to your Amazon ECS cluster name
  ECR_ADDRESS: 375446058757.dkr.ecr.ap-southeast-1.amazonaws.com

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        # id: build-image
        env:
          # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_ADDRESS/$ECR_REPOSITORY
          echo "${{ secrets.PROD_ENV }}" > backend/.env
          # docker build -t $ECR_ADDRESS/$ECR_REPOSITORY:$IMAGE_TAG .
          # docker push $ECR_ADDRESS/$ECR_REPOSITORY:$IMAGE_TAG
          # echo "image=$ECR_ADDRESS/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          docker-compose build
          docker-compose push

  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service --region "${AWS_REGION}" --cluster pacer-cluster --service server-service --force-new-deployment
          aws ecs wait services-stable --cluster pacer-cluster --services  server-service
